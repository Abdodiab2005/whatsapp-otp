<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WhatsApp Service Control Panel</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* Existing styles remain unchanged */
        
        /* New styles for enhanced features */
        .connection-methods {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }

        .connection-method {
            flex: 1;
            padding: 20px;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .qr-timer {
            margin-top: 10px;
            font-size: 0.9em;
            color: #666;
        }

        .qr-timer.expiring {
            color: #f44336;
        }

        .pairing-code-input {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .service-controls {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            border-radius: 4px;
            background: #f5f5f5;
            margin-bottom: 20px;
        }

        .status-indicator .dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }

        .status-indicator .dot.connected {
            background: #4caf50;
            box-shadow: 0 0 10px #4caf50;
        }

        .status-indicator .dot.disconnected {
            background: #f44336;
            box-shadow: 0 0 10px #f44336;
        }

        .status-indicator .dot.connecting {
            background: #2196f3;
            box-shadow: 0 0 10px #2196f3;
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .resource-monitor {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }

        .resource-card {
            background: #fff;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .resource-card h3 {
            margin: 0 0 10px 0;
            color: #333;
        }

        .progress-bar {
            height: 8px;
            background: #eee;
            border-radius: 4px;
            overflow: hidden;
        }

        .progress-bar .fill {
            height: 100%;
            background: #4caf50;
            transition: width 0.3s ease;
        }

        .progress-bar .fill.warning {
            background: #ff9800;
        }

        .progress-bar .fill.danger {
            background: #f44336;
        }
    </style>
</head>
<body>
    <!-- Existing header and container elements remain -->

    <div class="status-indicator">
        <div class="dot" id="connection-status-dot"></div>
        <span id="connection-status-text">Checking connection...</span>
    </div>

    <div class="service-controls">
        <button class="btn btn-primary" id="start-service">
            <i class="fas fa-play"></i> Start Service
        </button>
        <button class="btn btn-danger" id="stop-service">
            <i class="fas fa-stop"></i> Stop Service
        </button>
        <button class="btn btn-warning" id="restart-service">
            <i class="fas fa-sync"></i> Restart Service
        </button>
    </div>

    <div class="connection-methods">
        <div class="connection-method">
            <h3><i class="fas fa-qrcode"></i> QR Code Connection</h3>
            <button class="btn btn-primary" id="generate-qr">
                Generate QR Code
            </button>
            <div id="qr-container" style="display: none;">
                <div id="qrcode"></div>
                <div class="qr-timer" id="qr-timer">
                    Expires in: 5:00
                </div>
            </div>
        </div>

        <div class="connection-method">
            <h3><i class="fas fa-key"></i> Manual Pairing</h3>
            <input type="text" class="pairing-code-input" id="pairing-code" 
                   placeholder="Enter 8-digit pairing code">
            <button class="btn btn-primary" id="submit-pairing">
                Connect with Code
            </button>
        </div>
    </div>

    <div class="resource-monitor">
        <div class="resource-card">
            <h3>CPU Usage</h3>
            <div class="progress-bar">
                <div class="fill" id="cpu-usage" style="width: 0%"></div>
            </div>
            <span id="cpu-text">0%</span>
        </div>
        <div class="resource-card">
            <h3>Memory Usage</h3>
            <div class="progress-bar">
                <div class="fill" id="memory-usage" style="width: 0%"></div>
            </div>
            <span id="memory-text">0%</span>
        </div>
    </div>

    <!-- Existing content remains -->

    <script>
        // Existing JavaScript remains
        
        // New JavaScript for enhanced features
        let qrTimer;
        let resourceMonitorInterval;

        document.getElementById('generate-qr').addEventListener('click', async () => {
            try {
                const response = await fetch('/admin/whatsapp/generate-qr', {
                    method: 'POST',
                    headers: setAuthHeaders()
                });
                
                if (response.ok) {
                    const data = await response.json();
                    showQRCode(data.qr);
                    startQRTimer();
                }
            } catch (error) {
                showToast('Failed to generate QR code', 'error');
            }
        });

        document.getElementById('submit-pairing').addEventListener('click', async () => {
            const code = document.getElementById('pairing-code').value;
            if (!code || code.length !== 8) {
                showToast('Please enter a valid 8-digit pairing code', 'error');
                return;
            }

            try {
                const response = await fetch('/admin/whatsapp/pair', {
                    method: 'POST',
                    headers: setAuthHeaders({
                        'Content-Type': 'application/json'
                    }),
                    body: JSON.stringify({ code })
                });

                if (response.ok) {
                    showToast('Pairing code submitted successfully', 'success');
                    document.getElementById('pairing-code').value = '';
                } else {
                    throw new Error('Pairing failed');
                }
            } catch (error) {
                showToast('Failed to pair with code', 'error');
            }
        });

        function startQRTimer() {
            let timeLeft = 300; // 5 minutes in seconds
            const timerElement = document.getElementById('qr-timer');
            
            clearInterval(qrTimer);
            qrTimer = setInterval(() => {
                timeLeft--;
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;
                
                timerElement.textContent = `Expires in: ${minutes}:${seconds.toString().padStart(2, '0')}`;
                
                if (timeLeft <= 60) {
                    timerElement.classList.add('expiring');
                }
                
                if (timeLeft <= 0) {
                    clearInterval(qrTimer);
                    document.getElementById('qr-container').style.display = 'none';
                    showToast('QR Code expired', 'warning');
                }
            }, 1000);
        }

        function updateResourceUsage() {
            fetch('/admin/system/resources', {
                headers: setAuthHeaders()
            })
            .then(response => response.json())
            .then(data => {
                updateResourceBar('cpu', data.cpu);
                updateResourceBar('memory', data.memory);
            })
            .catch(error => console.error('Failed to fetch resource usage:', error));
        }

        function updateResourceBar(type, value) {
            const fill = document.getElementById(`${type}-usage`);
            const text = document.getElementById(`${type}-text`);
            
            fill.style.width = `${value}%`;
            text.textContent = `${value.toFixed(1)}%`;
            
            fill.className = 'fill';
            if (value > 80) fill.classList.add('danger');
            else if (value > 60) fill.classList.add('warning');
        }

        // Start resource monitoring
        resourceMonitorInterval = setInterval(updateResourceUsage, 5000);

        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
            clearInterval(qrTimer);
            clearInterval(resourceMonitorInterval);
        });
    </script>
</body>
</html>